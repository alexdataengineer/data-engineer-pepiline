{
	"name": "ML_CoinGecko",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "smalsize",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "784a769e-ce3c-4cd2-9d85-6548f8ae997d"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/c13fe431-45c7-45ed-aafb-780b48928c18/resourceGroups/new_recurse_service/providers/Microsoft.Synapse/workspaces/alex2026/bigDataPools/smalsize",
				"name": "smalsize",
				"type": "Spark",
				"endpoint": "https://alex2026.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/smalsize",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.4",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from sklearn.ensemble import RandomForestRegressor\n",
					"from sklearn.model_selection import train_test_split\n",
					"import pandas as pd\n",
					"from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\n",
					""
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"source": [
					"df = pd.read_parquet(\"abfss://silver@lakeiqbetim.dfs.core.windows.net/coins/ml_ready/\")\n",
					"X = df.drop(columns=[\"current_price\", \"id\", \"symbol\"])\n",
					"y = df[\"current_price\"]"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"source": [
					"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
					""
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"source": [
					"model = RandomForestRegressor(random_state=42)\n",
					"model.fit(X_train, y_train)\n",
					""
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"source": [
					"y_pred = model.predict(X_test)\n",
					"\n",
					"print(\"MAE:\", mean_absolute_error(y_test, y_pred))\n",
					"print(\"RMSE:\", mean_squared_error(y_test, y_pred, squared=False))\n",
					"print(\"R²:\", r2_score(y_test, y_pred))\n",
					""
				],
				"execution_count": 13
			},
			{
				"cell_type": "code",
				"source": [
					"from sklearn.model_selection import GridSearchCV\n",
					"from xgboost import XGBRegressor\n",
					"\n",
					"\n",
					"param_grid = {\n",
					"    \"max_depth\": [3, 5, 7],\n",
					"    \"learning_rate\": [0.05, 0.1],\n",
					"    \"n_estimators\": [100, 200],\n",
					"    \"subsample\": [0.8, 1.0]\n",
					"}\n",
					"\n",
					"grid = GridSearchCV(XGBRegressor(random_state=42), param_grid, cv=3, scoring=\"r2\", n_jobs=-1)\n",
					"grid.fit(X_train, y_train)\n",
					"\n",
					"best_model = grid.best_estimator_\n",
					"y_pred_best = best_model.predict(X_test)\n",
					"\n",
					"print(\"Best XGB MAE:\", mean_absolute_error(y_test, y_pred_best))\n",
					"print(\"Best XGB RMSE:\", mean_squared_error(y_test, y_pred_best, squared=False))\n",
					"print(\"Best XGB R²:\", r2_score(y_test, y_pred_best))"
				],
				"execution_count": 16
			},
			{
				"cell_type": "code",
				"source": [
					"import matplotlib.pyplot as plt\n",
					"import seaborn as sns\n",
					"\n",
					"importances = best_model.feature_importances_\n",
					"feature_names = X.columns\n",
					"\n",
					"sns.barplot(x=importances, y=feature_names)\n",
					"plt.title(\"Feature Importance\")\n",
					"plt.show()"
				],
				"execution_count": 17
			},
			{
				"cell_type": "code",
				"source": [
					"from sklearn.ensemble import StackingRegressor\n",
					"from sklearn.linear_model import Ridge\n",
					"\n",
					"stack_model = StackingRegressor(\n",
					"    estimators=[\n",
					"        (\"xgb\", XGBRegressor(**grid.best_params_)),\n",
					"        (\"rf\", RandomForestRegressor()),\n",
					"        (\"lr\", Ridge())\n",
					"    ],\n",
					"    final_estimator=Ridge()\n",
					")\n",
					"\n",
					"stack_model.fit(X_train, y_train)\n",
					"y_pred_stack = stack_model.predict(X_test)\n",
					""
				],
				"execution_count": 18
			},
			{
				"cell_type": "code",
				"source": [
					"importances = best_model.feature_importances_\n",
					"feature_names = X.columns  # Confirma se isso bate com X usado no treino\n",
					"\n",
					"# Debug\n",
					"print(\"Feature names:\", feature_names)\n",
					"print(\"Importances:\", importances)\n",
					""
				],
				"execution_count": 19
			},
			{
				"cell_type": "code",
				"source": [
					"import seaborn as sns\n",
					"import matplotlib.pyplot as plt\n",
					"\n",
					"corr = df[[\"market_cap\", \"total_volume\", \"circulating_supply\", \"price_change_percentage_24h\", \"current_price\"]].corr()\n",
					"sns.heatmap(corr, annot=True, cmap=\"coolwarm\")\n",
					"plt.title(\"Correlação entre variáveis\")\n",
					"plt.show()\n",
					""
				],
				"execution_count": 22
			}
		]
	}
}