{
	"name": "gold_layer",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "smalsize",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "63969368-248f-4103-88db-ab9d20802eb3"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/c13fe431-45c7-45ed-aafb-780b48928c18/resourceGroups/new_recurse_service/providers/Microsoft.Synapse/workspaces/alex2026/bigDataPools/smalsize",
				"name": "smalsize",
				"type": "Spark",
				"endpoint": "https://alex2026.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/smalsize",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.4",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql import functions as F\n",
					"from pyspark.sql.window import Window"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"df_silver = spark.read.parquet(\"abfss://bronze@lakeiqbetim.dfs.core.windows.net/silver/worldbank_populacao/\")\n",
					"display(df_silver)"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"source": [
					"window_ano = Window.partitionBy(\"pais\").orderBy(\"ano\")\n",
					"\n",
					"df_gold = (\n",
					"    df_silver\n",
					"    .withColumn(\"populacao_anterior\", F.lag(\"populacao_total\").over(window_ano))\n",
					"    .withColumn(\"crescimento_absoluto\", F.col(\"populacao_total\") - F.col(\"populacao_anterior\"))\n",
					"    .withColumn(\"crescimento_percentual\", \n",
					"                F.round((F.col(\"populacao_total\") - F.col(\"populacao_anterior\")) / F.col(\"populacao_anterior\") * 100, 2))\n",
					"    .withColumn(\"decada\", (F.col(\"ano\")/10).cast(\"int\") * 10)\n",
					")\n",
					""
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"source": [
					"df_decada = (\n",
					"    df_gold.groupBy(\"pais\", \"decada\")\n",
					"    .agg(\n",
					"        F.count(\"*\").alias(\"anos_disponiveis\"),\n",
					"        F.round(F.avg(\"populacao_total\"), 0).cast(\"bigint\").alias(\"media_populacional_decada\"),\n",
					"        F.round(F.max(\"populacao_total\"), 0).cast(\"bigint\").alias(\"populacao_maxima_decada\"),\n",
					"        F.round(F.min(\"populacao_total\"), 0).cast(\"bigint\").alias(\"populacao_minima_decada\")\n",
					"    )\n",
					")"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"source": [
					"df_decada.write.mode(\"overwrite\").parquet(\"abfss://gold@lakeiqbetim.dfs.core.windows.net/worldbank_populacao_por_decada/\")"
				],
				"execution_count": 8
			}
		]
	}
}